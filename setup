#!/bin/sh
# Script to init arch/ubuntu/windows_10 systems to nanOS

# Add colour vars
if [ -t 1 ] && command -v tput > /dev/null; then
    # see if it supports colors
    ncolors=$(tput colors)
    if [ -n "$ncolors" ] && [ $ncolors -ge 8 ]; then
        bold="$(tput bold       || echo)"
        blink="$(tput blink     || echo)"
        reset="$(tput sgr0      || echo)"
        black="$(tput setaf 0   || echo)"
        red="$(tput setaf 1     || echo)"
        green="$(tput setaf 2   || echo)"
        yellow="$(tput setaf 3  || echo)"
        blue="$(tput setaf 4    || echo)"
        magenta="$(tput setaf 5 || echo)"
        cyan="$(tput setaf 6    || echo)"
        white="$(tput setaf 7   || echo)"
    fi
fi


trypacmaninstall() {
    pkgs=`echo $@ | sed "s/--prompt //"`
    if [[ $1 == "--prompt" ]] && ask "install $pkgs"; then
        for pkg in $@; do
            if [[ $pkg == "--prompt" ]]; then continue; fi
            pacman -Qi $pkg 1>/dev/null 2>/dev/null && echo "$pkg@ is already installed" && return
            #Idk if this check works properly
            pacman -Qg "$pkg@" 1>/dev/null 2>/dev/null && echo "$pkg@ is already installed" && return
            echo "${red}Installing $pkg@${reset}" && pacman -S $pkg@;
        done
    fi
}

tryaurinstall() {
    pkgs=`echo $@ | sed "s/--prompt //"`
    if [[ $1 == "--prompt" ]] && ask "install $pkgs"; then
        for pkg in $@; do
            if [[ $pkg == "--prompt" ]]; then continue; fi
            pacman -Qi $pkg 1>/dev/null 2>/dev/null && echo "$pkg@ is already installed" && return
            #Idk if this check works properly
            pacman -Qg "$pkg@" 1>/dev/null 2>/dev/null && echo "$pkg@ is already installed" && return
            echo "${red}Installing $pkg@${reset}" && yay -S $pkg@;
        done
    fi
}

tryaptinstall() { echo "${magenta}Installing $1${reset}" && sudo apt install "$1"; }

wait_any_key() { read -n 1 -s -r -p "Press any key to continue"; }

#Promts the user to answer a yes/no question.
#Returns after a single char is entered without hitting return.
ask() {
    while true; do
    read -p "${1} ${yellow}y/n${reset} " -sn1
        echo
        [[ $REPLY =~ ^[Yy]$ ]] && return 0
        [[ $REPLY =~ ^[Nn]$ ]] && return 1
    done
}

asklink() {
    if ask "Link $1"; then
        #Create dir if not exist
        mkdir -p "$(dirname "${3}")"
        if [ -f "$3" ]; then
            if ask "$1 already exists. Remove it?"; then
                rm "$3"
            fi
        fi
        ln -sf "$2" "$3"
    fi
}

#This is not actually recursive lol
askrecursivelinkdir() {
    if ask "Recursively Link $1"; then
        #Create dir if not exist
        mkdir -p "$3"
        for dir in $(find "$2" -type d | sed "s|$2||"); do
            if [ ! -d "$3/$dir" ]; then
                echo "Creating directory $3/$dir"
                #Create child dirs if not exist
                mkdir -p "$3/$dir"
            fi
        done
        for file in $(find "$2" -type f | sed "s|$2/*||"); do
            if [ -f "$3/$file" ]; then
                if [ "$(diff -q "$2/$file" "$3/$file")" != "" ]; then
                    ask "'$3/$file' already exists and is not identical. Show diff" && diff -q "$2/$file" "$3/$file"
                    ask "Remove '$3/$file'" && rm "$3/$file"
                else
                    rm "$3/$file"
                fi
            fi
            echo "Linking $file"
            ln -s "$2/$file" "$3/$file"
        done
    fi
}

asklinksudo() {
    if ask "Link $1"; then
        #Create dir if not exist
        sudo mkdir -p "$(dirname "${3}")"
        if [ -f "$3" ]; then
            if ask "$1 already exists. Remove it?"; then
                sudo rm "$3"
            fi
        fi
        sudo ln -sf "$2" "$3"
    fi
}

askclone() {
    if [ -d $1 ]; then
        echo "Directory $1 already exists, skipping..."
    elif ask "Clone ${1}"; then
        echo "Cloning $1"
        git clone --recurse-submodules $2
    fi
}

setup_ssh() {
    if [ -d .ssh ]; then
        echo ".ssh directory already exits, continuing...";
    else
        echo "Creating .ssh directory";
        mkdir .ssh
    fi
    if [ -f .ssh/id_rsa.pub ]; then
        echo "ssh key already exists";
        echo "Using existing key";
    else
        echo "Generating ssh key..."
        ssh-keygen
    fi
    ask "add public key to remotes" && cat .ssh/id_rsa.pub && echo "Add ssh key to bitbucket and github before continuing." \
        && sh brave "https://bitbucket.org/account/settings/ssh-keys/" "https://github.com/settings/keys"
    wait_any_key
}

#Detect OS
detect_os() {
    case $(uname | tr '[:upper:]' '[:lower:]') in
      linux*)
        export NANOS_NAME=linux
        ;;
      darwin*)
        export NANOS_NAME=osx
        ;;
      msys*)
        export NANOS_NAME=windows
        ;;
      MINGW64_NT-10.0*)
        export NANOS_NAME=windows
        ;;
      *)
        export NANOS_NAME=notset
        ;;
    esac
    # TODO Warn if NANOS_NAME = notset

    #Detect distro
    if [ $NANOS_NAME = "linux" ]; then
        distros=("Arch" "Ubuntu")
        select opt in "${distros[@]}"; do
            NANOS_DISTRO="$opt"
            break
        done
    elif [ $NANOS_NAME = "linux" ]; then
        NANOS_DISTRO="Windows"
    else
        NANOS_DISTRO="N/A"
    fi

    #Set repos dir
    NANOS_REPOS_DIR="$HOME/repos"
    if [ $NANOS_NAME = "linux" ]; then
        NANOS_REPOS_DIR="$HOME/repos"
    elif [ $NANOS_NAME = "windows" ]; then
        NANOS_REPOS_DIR="~/source/repos"
    fi
}


# BEGIN

detect_os
cd ~

# Setup ssh
ask "Setup ssh" && setup_ssh

# Clone repos
askclone "dotfiles" "git@bitbucket.org:Nan0Scho1ar/dotfiles.git"
askclone "scripts" "git@bitbucket.org:Nan0Scho1ar/scripts.git"
askclone "vimwiki" "git@bitbucket.org:Nan0Scho1ar/vimwiki.git"

echo $NANOS_REPOS_DIR
mkdir -p "$NANOS_REPOS_DIR"
cd $NANOS_REPOS_DIR
askclone "n0s1.core" "git@github.com:Nan0Scho1ar/n0s1.core.git"
askclone "bish" "git@github.com:Nan0Scho1ar/bish"
askclone "gitmanage" "git@github.com:Nan0Scho1ar/gitmanage"

cd ~



# Update system
if [ $NANOS_DISTRO = "Arch" ]; then
    if ask "Upgrade packages"; then
        sudo pacman -Syu
        yay -Syu
    else
        sudo pacman -Sy
        yay -Sy
    fi
elif [ $NANOS_DISTRO = "Ubuntu" ]; then
    sudo apt update
    if ask "Upgrade packages"; then
        sudo apt upgrade
    fi
##TODO Windows
fi


# Install packages
## Arch
if [ $NANOS_DISTRO = "Arch" ]; then
    ### Pacman
    trypacmaninstall --prompt keychain fd ripgrep fzf bat tmux neovim flameshot synergy steam code youtube-dl mpv youtube-viewer zathura yay

    ### AUR
    tryaurinstall --prompt minecraft-launcher
    tryaurinstall --prompt pandoc
    tryaurinstall --prompt texlive-most
    tryaurinstall --prompt postman
    ###TODO Install Rider


## Ubuntu
elif [ $NANOS_DISTRO = "Ubuntu" ]; then
    if ask "Install packages"; then
        tryaptinstall fd-find
        tryaptinstall ripgrep
        tryaptinstall fzf
        tryaptinstall flameshot
        tryaptinstall synergy
        tryaptinstall steam
        tryaptinstall keychain
        tryaptinstall code
        tryaptinstall youtube-dl
        tryaptinstall mpv
        tryaptinstall youtube-viewer
        tryaptinstall zathura
        tryaptinstall bat
        tryaptinstall tmux

        tryaptinstall minecraft-launcher
        tryaptinstall neovim
        tryaptinstall pdflatex
        tryaptinstall pandoc
        tryaptinstall texlive-most
        tryaptinstall postman
    fi
    ###TODO Install Rider

    #fd is already used on Ubuntu
    [ -f ~/.local/bin/fd ] && ask "Link fdfind to fd (ubuntu fix)" && ln -s $(which fdfind) ~/.local/bin/fd

fi
##TODO Windows


#asklinksudo "/etc/update-motd.d/10-help-text" "/home/nan0scho1ar/dotfiles/linux/99-banner" "/etc/update-motd.d/99-banner"
asklink ".aliases" "/home/nan0scho1ar/dotfiles/.aliases" "/home/nan0scho1ar/.aliases"
asklink ".bashrc" "/home/nan0scho1ar/dotfiles/.bashrc" "/home/nan0scho1ar/.bashrc"
asklink ".git_aliases" "/home/nan0scho1ar/dotfiles/.git_aliases" "/home/nan0scho1ar/.git_aliases"
asklink ".profile" "/home/nan0scho1ar/dotfiles/.profile" "/home/nan0scho1ar/.profile"
asklink ".vimrc" "/home/nan0scho1ar/dotfiles/.vimrc" "/home/nan0scho1ar/.vimrc"
asklink ".xprofile" "/home/nan0scho1ar/dotfiles/.xprofile" "/home/nan0scho1ar/.xprofile"
asklink ".zshenv" "/home/nan0scho1ar/dotfiles/.zshenv" "/home/nan0scho1ar/.zshenv"
asklink ".tmux.conf" "/home/nan0scho1ar/dotfiles/.tmux.conf" "/home/nan0scho1ar/.tmux.conf"
askrecursivelinkdir ".config" "/home/nan0scho1ar/dotfiles/.config" "/home/nan0scho1ar/.config"
asklinksudo "/etc/hosts" "/home/nan0scho1ar/dotfiles/linux/hosts" "/etc/hosts"

# Setup vim/nvim
## vim
if ask "Install vim/nvim plugins"; then
    if [ $NANOS_NAME = "linux" ]; then
        if [[ -z "~/.vim/autoload/plug.vim" ]]; then
        curl -fLo ~/.vim/autoload/plug.vim --create-dirs \
            https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
        vim -E -s +PlugInstall +visual +qall
        fi

        mkdir -p "${HOME}/.config/nvim/site/autoload"
        cp ~/.vim/autoload/plug.vim "${HOME}/.config/nvim/site/autoload/plug.vim"
        nvim -E -s +PlugInstall +visual +qall
    fi
fi

#Git settings
if ask "Update git settings"; then
    git config --global pull.rebase false
    git config --global user.email "scorch267@gmail.com"
        #rm -r ~/.xmonad
    git config --global user.name "nan0scho1ar"
    git config --global core.editor vim
fi
