#!/bin/bash
# Script to init arch/ubuntu/windows_10 systems to nanOS

# Add colour vars
if [ -t 1 ] && command -v tput > /dev/null; then
    # see if it supports colors
    ncolors=$(tput colors)
    if [ -n "$ncolors" ] && [ $ncolors -ge 8 ]; then
        bold="$(tput bold       || echo)"
        blink="$(tput blink     || echo)"
        reset="$(tput sgr0      || echo)"
        black="$(tput setaf 0   || echo)"
        red="$(tput setaf 1     || echo)"
        green="$(tput setaf 2   || echo)"
        yellow="$(tput setaf 3  || echo)"
        blue="$(tput setaf 4    || echo)"
        magenta="$(tput setaf 5 || echo)"
        cyan="$(tput setaf 6    || echo)"
        white="$(tput setaf 7   || echo)"
    fi
fi


trypacmaninstall() {
    pkgs=`echo $@ | sed "s/--prompt //"`
    for pkg in $pkgs; do
        pacman -Qi $pkg 1>/dev/null 2>/dev/null && echo "${green}$pkg${reset} is already installed" && continue
        #Idk if this check works properly
        pacman -Qg "$pkg@" 1>/dev/null 2>/dev/null && echo "${green}$pkg${reset} is already installed" && continue
        if [[ $1 == "--prompt" ]]; then
            ask "install $pkg" || return
        fi
        echo "${red}Installing $pkg${reset}" && sudo pacman -S $pkg;
    done
}

tryaurinstall() {
    pkgs=`echo $@ | sed "s/--prompt //"`
    for pkg in $pkgs; do
        pacman -Qi $pkg 1>/dev/null 2>/dev/null && echo "${green}$pkg${reset} is already installed" && continue
        #Idk if this check works properly
        pacman -Qg "$pkg@" 1>/dev/null 2>/dev/null && echo "${gree}$pkg${reset} is already installed" && continue
        if [[ $1 == "--prompt" ]]; then
            ask "install $pkg" || return
        fi
        echo "${red}Installing $pkg${reset}" && yay -S $pkg;
    done
}

tryaptinstall() {
    dpkg-query -W -f='${Status}' $1 2>/dev/null | grep -q "install ok installed" && echo "${green}$1${reset} is already installed" && return
    ask "${magenta}$1${reset} is not installed, would you like to install it" && sudo apt-get --yes install $1
}

wait_any_key() { read -n 1 -s -r -p "Press any key to continue"; }

#Promts the user to answer a yes/no question.
#Returns after a single char is entered without hitting return.
ask() {
    while true; do
    read -p "${1} ${yellow}y/n${reset} " -sn1
        echo
        [[ $REPLY =~ ^[Yy]$ ]] && return 0
        [[ $REPLY =~ ^[Nn]$ ]] && return 1
    done
}

asklink() {
    if [ "$(readlink -- $3)" = $2 ]; then
        echo "${green}$1${reset} already linked correctly"
    elif ask "Link ${magenta}$1${reset}"; then
        #Create dir if not exist
        mkdir -p "$(dirname "${3}")"
        if [ -f "$3" ]; then
            ask "${red}$1${reset} already exists. Remove it?" && rm "$3"
        fi
        ln -sf "$2" "$3"
    fi
}

#This is not actually recursive lol
askrecursivelinkdir() {
    for f in $(find "$2" -type f | sed "s|$2/*||"); do
        if [ "$(readlink -- $3/$f)" != "$2/$f" ]; then
	    if ask "Recursively Link $1"; then
		#Create dir if not exist
		mkdir -p "$3"
		for dir in $(find "$2" -type d | sed "s|$2||"); do
		    if [ ! -d "$3/$dir" ]; then
			echo "Creating directory $3/$dir"
			#Create child dirs if not exist
			mkdir -p "$3/$dir"
		    fi
		done
		for file in $(find "$2" -type f | sed "s|$2/*||"); do
		    if [ "$(readlink -- $3/$file)" = "$2/$file" ]; then
                echo "${green}$1${reset} already linked correctly"
                continue
            elif [ ! -z "$3/$file" ]; then
                if [ "$(diff -q "$2/$file" "$3/$file")" != "" ]; then
                    ask "${magenta}$3/$file${reset} already exists and is not identical. Show diff" &&
                        diff -q "$2/$file" "$3/$file"
                    ask "Remove ${red}$3/$file${reset}" && rm "$3/$file"
                else
                    rm "$3/$file"
                fi
            else
                echo "File does not exist"
		    fi
		    echo "Linking ${magenta}$file${reset}"
		    ln -s "$2/$file" "$3/$file"
		done
	    fi
	    return
	fi
    done
    echo "${green}.config${reset} already linked correctly"
}

asklinksudo() {
    if [ "$(readlink -- $3)" = $2 ]; then
        echo "${green}$1${reset} already linked correctly"
    elif ask "Link ${magenta}$1${reset}"; then
        #Create dir if not exist
        mkdir -p "$(dirname "${3}")"
        if [ -f "$3" ]; then
            ask "${red}$1${reset} already exists. Remove it?" && sudo rm "$3"
        fi
        sudo ln -sf "$2" "$3"
    fi
}

askclone() {
    if [ -d $1 ]; then
        echo "Directory $1 already exists, skipping..."
    elif ask "Clone ${1}"; then
        echo "Cloning $1"
        git clone --recurse-submodules $2
    fi
}

setup_ssh() {
    if [ -d .ssh ]; then
        echo ".ssh directory already exits, continuing...";
    else
        echo "Creating .ssh directory";
        mkdir .ssh
    fi
    if [ -f .ssh/id_rsa.pub ]; then
        echo "ssh key already exists";
        echo "Using existing key";
    else
        echo "Generating ssh key..."
        ssh-keygen
    fi
    ask "add public key to remotes" && cat .ssh/id_rsa.pub && echo "Add ssh key to bitbucket and github before continuing." \
        && sh brave "https://bitbucket.org/account/settings/ssh-keys/" "https://github.com/settings/keys"
    wait_any_key
}

#Detect OS
detect_os() {
    case $(uname | tr '[:upper:]' '[:lower:]') in
      linux*)
        export NANOS_NAME=linux
        ;;
      darwin*)
        export NANOS_NAME=osx
        ;;
      msys*)
        export NANOS_NAME=windows
        ;;
      MINGW64_NT-10.0*)
        export NANOS_NAME=windows
        ;;
      *)
        export NANOS_NAME=notset
        ;;
    esac
    # TODO Warn if NANOS_NAME = notset

    #Detect distro
    if [ $NANOS_NAME = "linux" ]; then
        distros=("Arch" "Ubuntu")
        select opt in "${distros[@]}"; do
            NANOS_DISTRO="$opt"
            break
        done
    elif [ $NANOS_NAME = "linux" ]; then
        NANOS_DISTRO="Windows"
    else
        NANOS_DISTRO="N/A"
    fi

    #Set repos dir
    NANOS_REPOS_DIR="$HOME/repos"
    if [ $NANOS_NAME = "linux" ]; then
        NANOS_REPOS_DIR="$HOME/repos"
    elif [ $NANOS_NAME = "windows" ]; then
        NANOS_REPOS_DIR="~/source/repos"
    fi
}


# BEGIN

detect_os
cd ~

echo ${blue}SSH Keys${reset}
# Setup ssh
ask "Setup ssh" && setup_ssh

echo ${blue}Git repos${reset}
# Clone repos

mkdir -p "$NANOS_REPOS_DIR"
cd $NANOS_REPOS_DIR
askclone "dotfiles" "git@bitbucket.org:Nan0Scho1ar/dotfiles.git"
askclone "scripts" "git@bitbucket.org:Nan0Scho1ar/scripts.git"
askclone "vimwiki" "git@bitbucket.org:Nan0Scho1ar/vimwiki.git"
askclone "n0s1.core" "git@github.com:Nan0Scho1ar/n0s1.core.git"
askclone "bish" "git@github.com:Nan0Scho1ar/bish"
askclone "gitmanager" "git@github.com:Nan0Scho1ar/gitmanager"

cd ~
echo ${blue}System Packages${reset}

# Update system
if [ $NANOS_DISTRO = "Arch" ]; then
    if ask "Upgrade packages"; then
        sudo pacman -Syu
        yay -Syu
    fi
elif [ $NANOS_DISTRO = "Ubuntu" ]; then
    sudo apt update
    if ask "Upgrade packages"; then
        sudo apt upgrade
    fi
##TODO Windows
fi


# Install packages
## Arch
if [ $NANOS_DISTRO = "Arch" ]; then
    if ask "install packages"; then
        sudo pacman -Sy
        ### Pacman
        trypacmaninstall --prompt keychain fd ripgrep fzf bat tmux neovim flameshot synergy \
            steam code youtube-dl mpv youtube-viewer zathura yay vim neovim nodejs yarn \
            ttf-jetbrains-mono alacritty emacs python-neovim
        ### AUR
        if ask "Askinstall extra"; then
            yay -Sy
            tryaurinstall --prompt minecraft-launcher
            tryaurinstall --prompt pandoc
            tryaurinstall --prompt texlive-most
            tryaurinstall --prompt postman
            tryaurinstall --prompt rider
        fi
        if ask "Install rust toolchain"; then
            trypacmaninstall rustup
            sudo rustup install stable
            sudo rustup default stable
            sudo rustup component add rls rust-analysis rust-src
        fi
    fi
## Ubuntu
elif [ $NANOS_DISTRO = "Ubuntu" ]; then
    if ask "Install packages"; then
        tryaptinstall ripgrep
        tryaptinstall fzf
        tryaptinstall keychain
        tryaptinstall tmux
        tryaptinstall curl
        tryaptinstall youtube-dl
        tryaptinstall vim
        tryaptinstall neovim
        tryaptinstall nodejs
        tryaptinstall zsh

        tryaptinstall fd-find
        #fd is already used on Ubuntu
        if dpkg-query -W -f='${Status}' fd-find 2> /dev/null | grep -q "install ok installed"; then
            asklink "fdfind (ubuntu fix)" "$(which fdfind)" "$HOME/.local/bin/fd"
        fi
        #Bat is not in standard repos because reasons
        if dpkg-query -W -f='${Status}' bat 2> /dev/null | grep -q "install ok installed"; then
            echo "${green}bat${reset} is already installed"
        elif ask "'${magenta}bat${reset}' is not installed, would you like to install it"; then
            cur_dir=$(pwd)
            cd /tmp
            wget https://github.com/sharkdp/bat/releases/download/v0.17.1/bat_0.17.1_amd64.deb
            sudo dpkg -i bat_0.17.1_amd64.deb
            cd $cur_dir
        fi

    fi
    ###TODO Install Rider


fi
##TODO Windows

echo ${blue}Link files${reset}

#asklinksudo "/etc/update-motd.d/10-help-text" "/home/nan0scho1ar/dotfiles/linux/99-banner" "/etc/update-motd.d/99-banner"
asklink ".bashrc" "$NANOS_REPOS_DIR/dotfiles/.bashrc" "/home/nan0scho1ar/.bashrc"
asklink ".profile" "$NANOS_REPOS_DIR/dotfiles/.profile" "$HOME/.profile"
asklink ".vimrc" "$NANOS_REPOS_DIR/dotfiles/.vimrc" "/home/nan0scho1ar/.vimrc"
asklink ".xprofile" "$NANOS_REPOS_DIR/dotfiles/.xprofile" "$HOME/.xprofile"
asklink ".zshenv" "$NANOS_REPOS_DIR/dotfiles/.zshenv" "$HOME/.zshenv"
asklink ".tmux.conf" "$NANOS_REPOS_DIR/dotfiles/.tmux.conf" "/home/nan0scho1ar/.tmux.conf"
askrecursivelinkdir ".config" "$NANOS_REPOS_DIR/dotfiles/.config" "$HOME/.config"
asklinksudo "/etc/hosts" "$NANOS_REPOS_DIR/dotfiles/linux/hosts" "/etc/hosts"

source $HOME/.profile
echo ${blue}Vim plugins${reset}
#Setup vim/nvim
if [ -f "$XDG_DATA_HOME/vim/autoload/plug.vim" ] && [ -f "$XDG_DATA_HOME/nvim/site/autoload/plug.vim" ]; then
    echo "${green}vimplug already installed${reset}"
elif ask "Install vim/nvim plugins"; then
    if [ $NANOS_NAME = "linux" ]; then
        if [ ! -f "$XDG_DATA_HOME/vim/autoload/plug.vim" ]; then
            echo "$XDG_DATA_HOME/vim/autoload/plug.vim not found. Downloading..."
            curl -fLo ~/.vim/autoload/plug.vim --create-dirs \
                https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
            vim -E -s +PlugInstall +visual +qall
        fi


        if [ ! -f "$XDG_DATA_HOME/nvim/site/autoload/plug.vim" ]; then
            echo "$HOME/.config/nvim/site/autoload/plug.vim not found. Copying from $HOME/.vim/autoload/plug.vim"
            curl -fLo "$XDG_DATA_HOME/nvim/site/autoload/plug.vim" --create-dirs \
                https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
        fi
    fi
fi

#echo ${blue}Git settings${reset}
##Git settings
#if [ "$(git config --get pull.rebase)" = false ] &&
#   [ "$(git config --get user.email)" = "scorch267@gmail.com" ] &&
#   [ "$(git config --get user.name)" = "nan0scho1ar" ] &&
#   [ "$(git config --get core.editor)" = "vim" ]; then
#    echo "${green}Git${reset} configured correctly"
#elif ask "Update git settings"; then
#    git config --global pull.rebase false
#    git config --global user.email "scorch267@gmail.com"
#    git config --global user.name "nan0scho1ar"
#    git config --global core.editor "vim"
#fi
